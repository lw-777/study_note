
GIT版本控制系统
{
	版本控制系统功能
	{
		1、纪录历史版本信息(纪录每一次修改的信息)
		2、方便团结相互之间协作开发
		//...
		
	}
	
	常用的版本控制系统
	{
		1、CVS/SVN	//集中式版本控制系统
		{
			1、需要联网才能回退或查看历史版本信息
			2、中央服务器毁坏了，一切OVER
			3、所有的上传和下载都是基于文件传输方式完成的，速度慢
		}
		
------------------------------------------------------------------
		2、GIT		//分布式版本控制系统
		{
			GIT优点
			{
				1、无需联网也能纪录和查看历史版本信息
				2、无需过多一来中央仓库，每个人本地都有全部信息
				3、向中央仓库传输内容依托的时文件流传输，速度比SVN快N倍
			}
			
			GIT工作原理
			{
				1、工作区：我们能看到的，并且平时用来写代码的区域
				2、暂存区：临时存储用的
				3、历史区：生成历史版本
				
				工作顺序：
						<----------------------									$git push origin master
							$git add -A		  |		$git commit -m				$git pull origin master
					工作区	----------->	暂存区	--------------->	历史区	----------------------->	中央仓库
					   /\												  |
						|			代码回滚$git check					  |
						--------------------------------------------------		
				
				//从工作区提交暂存区，从暂存区提交到历史区：是把内容复制一份传过去的，本区域中依然存在这些信息，只有这样才能对比出那些文件在某个区域
				
			}
			
			GIT工作流程
			{
			
				1、GIT的全局配置
				{
					第一次安装完成git后，在全局环境下配置基本信息：我是谁？
					
					1.$git config -l 				//查看配置信息
					2.$git config --global -l		//查看全局配置信息
				}
				
				2、创建仓库完成版本控制
				{
					创建本地git仓库
					{
						$git init 
						//->会生成一个隐藏文件夹“.git”(这个文件夹千万不能删，所有暂存区和历史区还有一些其他的信息都在这里，删了就不是一个完整的git仓库)
					}
					
					在本地编写完代码后(在工作区)，把一些文件提交到暂存区
					{
						$git add xxx					//把某一个文件或者文件夹提交到暂存区
						$git add . |(or) git add -A		//把当前仓库中所有最新修改的文件都提交到暂存区
						
						$git status			//查看当前文件的状态(红色代表在工作区，绿色代表在暂存区，看不见东西证明多有修改的信息都已经提交到历史区)
					}	
					
					把暂存区内容提交到历史区
					{
						$git commit -m'描述信息：本次提交内容的一个描述'
						
						查看历史版本信息
						{
							$git log
							$git reflog	//包含回滚信息
						}
					}
					
					GIT和GIT-HUB
					{
						GIT-HUB:https://www/github.com
							一个网站(一个开源的源代码管理平台)，用户注册以后，可以在自己的账户下创建仓库，用来管理项目源代码
							(源代码是基于git传到仓库中)
							
							我们所熟知的插件、类库、框架等都在这个平台上有托管，我们可以下载观看和研究代码等
							
						Settings(用户设置)
						{
							Profile ---> 修改个人信息
						}
						
						创建仓库
						{
							New Repository -->	Create repository
								public	公共仓库作为开源的项目
								private	私有仓库作为内部团队协作管理的项目
								
							Settings
						}
	
					}
				}
				
				3、把本地仓库信息提交到远程仓库
				{
					建立本地仓库和远程仓库的连接
					{
						$git remote -v							//查看本地仓库和那些远程仓库保持连接
						
						$git remote add origin [GIT仓库地址]	//让本地仓库和远程仓库新建一个连接
																//origin 是随便起的一个链接名字，可以改成自己想要的，不过一般都是用的这个
						
						$git remote rm origin					//删除关联信息
					
						$git pull origin master					//提交之前最好先拉取
						
						$git push origin master					//把本地代码提交到远程仓库(需要输入GitHub的用户名密码)
						
					}
					
				}
				
			}
			
		}
------------------------------------------------------------------		
	}
	
}



























